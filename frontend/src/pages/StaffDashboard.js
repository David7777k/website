import React, { useState, useEffect, useRef } from 'react';
import './StaffDashboard.css';

const StaffDashboard = () => {
  const [activeTab, setActiveTab] = useState('visits');
  const [isQrScannerActive, setIsQrScannerActive] = useState(false);
  const [pendingVisits, setPendingVisits] = useState([]);
  const [musicQueue, setMusicQueue] = useState([]);
  const [staffStats, setStaffStats] = useState({});
  const [notifications, setNotifications] = useState([]);
  const [promoLimit, setPromoLimit] = useState(2);
  const [createdPromos, setCreatedPromos] = useState(0);
  const qrReaderRef = useRef(null);

  // Mock data initialization
  useEffect(() => {
    loadMockData();
  }, []);

  const loadMockData = () => {
    // Mock pending visits
    setPendingVisits([
      {
        id: 1,
        customerName: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
        phone: '+380501234567',
        time: '19:30',
        qrCode: 'QR123456',
        status: 'pending'
      },
      {
        id: 2,
        customerName: '–ú–∞—Ä—ñ—è –ü–µ—Ç—Ä–µ–Ω–∫–æ',
        phone: '+380507654321',
        time: '20:15',
        qrCode: 'QR789012',
        status: 'pending'
      },
      {
        id: 3,
        customerName: '–î–º–∏—Ç—Ä–æ –Ü–≤–∞–Ω–µ–Ω–∫–æ',
        phone: '+380509876543',
        time: '21:00',
        qrCode: 'QR345678',
        status: 'pending'
      }
    ]);

    // Mock music queue
    setMusicQueue([
      {
        id: 1,
        title: '–û–∫–µ–∞–Ω –ï–ª—å–∑–∏ - –û–±—ñ–π–º–∏',
        artist: '–û–∫–µ–∞–Ω –ï–ª—å–∑–∏',
        genre: '–†–æ–∫',
        requestedBy: '–ê–Ω–Ω–∞ –ö.',
        duration: '4:23',
        status: 'pending'
      },
      {
        id: 2,
        title: 'KAZKA - –ü–ª–∞–∫–∞–ª–∞',
        artist: 'KAZKA',
        genre: '–ü–æ–ø',
        requestedBy: '–°–µ—Ä–≥—ñ–π –ú.',
        duration: '3:45',
        status: 'pending'
      },
      {
        id: 3,
        title: '–ë—É–º–±–æ–∫—Å - –í–∞—Ö—Ç–µ—Ä–∞–º',
        artist: '–ë—É–º–±–æ–∫—Å',
        genre: '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞',
        requestedBy: '–û–ª–µ–Ω–∞ –í.',
        duration: '3:56',
        status: 'pending'
      }
    ]);

    // Mock staff stats
    setStaffStats({
      totalVisits: 47,
      averageRating: 4.8,
      totalTips: 2340,
      weeklyActivity: [12, 8, 15, 9, 13, 7, 11],
      serviceRating: 4.9,
      personalityRating: 4.7
    });

    // Mock notifications
    setNotifications([
      {
        id: 1,
        type: 'visit',
        message: '–ù–æ–≤–∏–π –≤—ñ–∑–∏—Ç –≤—ñ–¥ –û–ª–µ–∫—Å–∞–Ω–¥—Ä –ö.',
        time: '2 —Ö–≤–∏–ª–∏–Ω–∏ —Ç–æ–º—É',
        isRead: false
      },
      {
        id: 2,
        type: 'music',
        message: '–ù–æ–≤–∏–π —Ç—Ä–µ–∫ —É —á–µ—Ä–∑—ñ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó',
        time: '5 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É',
        isRead: false
      },
      {
        id: 3,
        type: 'tip',
        message: '–û—Ç—Ä–∏–º–∞–Ω–æ —á–∞–π–æ–≤—ñ 50 ‚Ç¥',
        time: '10 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É',
        isRead: true
      },
      {
        id: 4,
        type: 'rating',
        message: '–ù–æ–≤–∞ –æ—Ü—ñ–Ω–∫–∞: 5 ‚≠ê',
        time: '15 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É',
        isRead: true
      }
    ]);
  };

  // QR Scanner functions
  const startQrScanner = () => {
    setIsQrScannerActive(true);
    // Mock QR scanner - in real app would use html5-qrcode library
    setTimeout(() => {
      const mockQrResult = 'QR123456';
      handleQrScan(mockQrResult);
    }, 2000);
  };

  const stopQrScanner = () => {
    setIsQrScannerActive(false);
  };

  const handleQrScan = (qrCode) => {
    const visit = pendingVisits.find(v => v.qrCode === qrCode);
    if (visit) {
      confirmVisit(visit.id);
      setIsQrScannerActive(false);
    }
  };

  // Visit management
  const confirmVisit = (visitId) => {
    setPendingVisits(prev => prev.filter(v => v.id !== visitId));
    // Add success notification
    setNotifications(prev => [
      {
        id: Date.now(),
        type: 'success',
        message: '–í—ñ–∑–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
        time: '–©–æ–π–Ω–æ',
        isRead: false
      },
      ...prev
    ]);
  };

  const rejectVisit = (visitId) => {
    setPendingVisits(prev => prev.filter(v => v.id !== visitId));
  };

  // Music moderation
  const approveTrack = (trackId) => {
    setMusicQueue(prev => prev.filter(t => t.id !== trackId));
    setNotifications(prev => [
      {
        id: Date.now(),
        type: 'success',
        message: '–¢—Ä–µ–∫ —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏',
        time: '–©–æ–π–Ω–æ',
        isRead: false
      },
      ...prev
    ]);
  };

  const rejectTrack = (trackId) => {
    setMusicQueue(prev => prev.filter(t => t.id !== trackId));
  };

  // Promo creation
  const createPromo = (promoData) => {
    if (createdPromos >= promoLimit) {
      alert('–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –∞–∫—Ü—ñ–π –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å (2 –∞–∫—Ü—ñ—ó)');
      return;
    }
    setCreatedPromos(prev => prev + 1);
    setNotifications(prev => [
      {
        id: Date.now(),
        type: 'success',
        message: `–ê–∫—Ü—ñ—é "${promoData.title}" —Å—Ç–≤–æ—Ä–µ–Ω–æ`,
        time: '–©–æ–π–Ω–æ',
        isRead: false
      },
      ...prev
    ]);
  };

  // Notification management
  const markAsRead = (notificationId) => {
    setNotifications(prev =>
      prev.map(n => n.id === notificationId ? { ...n, isRead: true } : n)
    );
  };

  const deleteNotification = (notificationId) => {
    setNotifications(prev => prev.filter(n => n.id !== notificationId));
  };

  const tabs = [
    { id: 'visits', label: '–í—ñ–∑–∏—Ç–∏', icon: 'üì±' },
    { id: 'music', label: '–ú—É–∑–∏–∫–∞', icon: 'üéµ' },
    { id: 'promos', label: '–ê–∫—Ü—ñ—ó', icon: 'üéÅ' },
    { id: 'stats', label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: 'üìä' },
    { id: 'notifications', label: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'üîî' }
  ];

  return (
    <div className="staff-dashboard">
      <div className="dashboard-header">
        <h1>üîß –ü–∞–Ω–µ–ª—å –ü–µ—Ä—Å–æ–Ω–∞–ª—É</h1>
        <p>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è–º–∏, –º—É–∑–∏–∫–æ—é —Ç–∞ –∞–∫—Ü—ñ—è–º–∏</p>
      </div>

      {/* Tab Navigation */}
      <div className="tab-navigation">
        {tabs.map(tab => (
          <button
            key={tab.id}
            className={`tab-button ${activeTab === tab.id ? 'active' : ''}`}
            onClick={() => setActiveTab(tab.id)}
          >
            <span className="tab-icon">{tab.icon}</span>
            <span className="tab-label">{tab.label}</span>
            {tab.id === 'notifications' && notifications.filter(n => !n.isRead).length > 0 && (
              <span className="notification-badge">
                {notifications.filter(n => !n.isRead).length}
              </span>
            )}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      <div className="tab-content">
        {/* Visits Tab */}
        {activeTab === 'visits' && (
          <div className="visits-tab">
            <div className="qr-scanner-section">
              <h2>üì± QR-–°–∫–∞–Ω–µ—Ä</h2>
              <div className="qr-scanner-container">
                {!isQrScannerActive ? (
                  <div className="qr-scanner-placeholder">
                    <div className="qr-placeholder-icon">üì∑</div>
                    <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É QR-—Å–∫–∞–Ω–µ—Ä–∞</p>
                    <button className="btn btn-primary" onClick={startQrScanner}>
                      –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∫–∞–Ω–µ—Ä
                    </button>
                  </div>
                ) : (
                  <div className="qr-scanner-active">
                    <div className="scanning-animation">
                      <div className="scanning-line"></div>
                    </div>
                    <p>–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è QR-–∫–æ–¥—É...</p>
                    <button className="btn btn-secondary" onClick={stopQrScanner}>
                      –ó—É–ø–∏–Ω–∏—Ç–∏
                    </button>
                  </div>
                )}
              </div>
            </div>

            <div className="pending-visits-section">
              <h2>‚è≥ –û—á—ñ–∫—É—é—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ({pendingVisits.length})</h2>
              <div className="visits-list">
                {pendingVisits.map(visit => (
                  <div key={visit.id} className="visit-card">
                    <div className="visit-info">
                      <h3>{visit.customerName}</h3>
                      <p>üìû {visit.phone}</p>
                      <p>üïê {visit.time}</p>
                      <p>üé´ {visit.qrCode}</p>
                    </div>
                    <div className="visit-actions">
                      <button
                        className="btn btn-primary"
                        onClick={() => confirmVisit(visit.id)}
                      >
                        ‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏
                      </button>
                      <button
                        className="btn btn-secondary"
                        onClick={() => rejectVisit(visit.id)}
                      >
                        ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
                      </button>
                    </div>
                  </div>
                ))}
                {pendingVisits.length === 0 && (
                  <div className="empty-state">
                    <p>‚ú® –í—Å—ñ –≤—ñ–∑–∏—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–æ</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* Music Tab */}
        {activeTab === 'music' && (
          <div className="music-tab">
            <h2>üéµ –ß–µ—Ä–≥–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó ({musicQueue.length})</h2>
            <div className="music-queue">
              {musicQueue.map(track => (
                <div key={track.id} className="track-card">
                  <div className="track-info">
                    <h3>{track.title}</h3>
                    <p>üé§ {track.artist}</p>
                    <p>üé≠ {track.genre}</p>
                    <p>üë§ –ó–∞–º–æ–≤–∏–≤: {track.requestedBy}</p>
                    <p>‚è±Ô∏è {track.duration}</p>
                  </div>
                  <div className="track-actions">
                    <button
                      className="btn btn-primary"
                      onClick={() => approveTrack(track.id)}
                    >
                      ‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏
                    </button>
                    <button
                      className="btn btn-secondary"
                      onClick={() => rejectTrack(track.id)}
                    >
                      ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏
                    </button>
                  </div>
                </div>
              ))}
              {musicQueue.length === 0 && (
                <div className="empty-state">
                  <p>üé∂ –ß–µ—Ä–≥–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ä–æ–∂–Ω—è</p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Promos Tab */}
        {activeTab === 'promos' && (
          <div className="promos-tab">
            <div className="promo-limit-info">
              <h2>üéÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ê–∫—Ü—ñ–π</h2>
              <p>–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {createdPromos}/{promoLimit} –∞–∫—Ü—ñ–π –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</p>
              <div className="promo-progress">
                <div 
                  className="promo-progress-bar"
                  style={{ width: `${(createdPromos / promoLimit) * 100}%` }}
                ></div>
              </div>
            </div>

            {createdPromos < promoLimit && (
              <div className="promo-form">
                <h3>–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –∞–∫—Ü—ñ—é</h3>
                <form onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.target);
                  createPromo({
                    title: formData.get('title'),
                    description: formData.get('description'),
                    discount: formData.get('discount'),
                    duration: formData.get('duration')
                  });
                  e.target.reset();
                }}>
                  <div className="form-group">
                    <label>–ù–∞–∑–≤–∞ –∞–∫—Ü—ñ—ó</label>
                    <input type="text" name="title" required placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –©–∞—Å–ª–∏–≤–∞ –≥–æ–¥–∏–Ω–∞" />
                  </div>
                  <div className="form-group">
                    <label>–û–ø–∏—Å</label>
                    <textarea name="description" required placeholder="–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∞–∫—Ü—ñ—ó"></textarea>
                  </div>
                  <div className="form-row">
                    <div className="form-group">
                      <label>–ó–Ω–∏–∂–∫–∞ (%)</label>
                      <input type="number" name="discount" min="5" max="50" required />
                    </div>
                    <div className="form-group">
                      <label>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó (–¥–Ω—ñ)</label>
                      <input type="number" name="duration" min="1" max="30" required />
                    </div>
                  </div>
                  <button type="submit" className="btn btn-primary">
                    üéÅ –°—Ç–≤–æ—Ä–∏—Ç–∏ –ê–∫—Ü—ñ—é
                  </button>
                </form>
              </div>
            )}

            <div className="created-promos">
              <h3>–Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∞–∫—Ü—ñ–π</h3>
              {createdPromos === 0 ? (
                <div className="empty-state">
                  <p>üìù –©–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∞–∫—Ü—ñ—ó</p>
                </div>
              ) : (
                <div className="promo-history">
                  {[...Array(createdPromos)].map((_, index) => (
                    <div key={index} className="promo-history-item">
                      <p>üéÅ –ê–∫—Ü—ñ—è #{index + 1} - –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ</p>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Stats Tab */}
        {activeTab === 'stats' && (
          <div className="stats-tab">
            <h2>üìä –û—Å–æ–±–∏—Å—Ç–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-icon">üéØ</div>
                <div className="stat-info">
                  <h3>{staffStats.totalVisits}</h3>
                  <p>–û–±—Å–ª—É–∂–µ–Ω–æ –≤—ñ–∑–∏—Ç—ñ–≤</p>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">‚≠ê</div>
                <div className="stat-info">
                  <h3>{staffStats.averageRating}</h3>
                  <p>–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥</p>
                </div>
              </div>
              
              <div className="stat-card">
                <div className="stat-icon">üí∞</div>
                <div className="stat-info">
                  <h3>{staffStats.totalTips} ‚Ç¥</h3>
                  <p>–û—Ç—Ä–∏–º–∞–Ω–æ —á–∞–π–æ–≤–∏—Ö</p>
                </div>
              </div>
            </div>

            <div className="rating-breakdown">
              <h3>üìà –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–π—Ç–∏–Ω–≥–∏</h3>
              <div className="rating-items">
                <div className="rating-item">
                  <span>‚≠ê –°–µ—Ä–≤—ñ—Å:</span>
                  <span>{staffStats.serviceRating}/5</span>
                </div>
                <div className="rating-item">
                  <span>üòä –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:</span>
                  <span>{staffStats.personalityRating}/5</span>
                </div>
              </div>
            </div>

            <div className="activity-chart">
              <h3>üìÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ –¥–Ω—è—Ö</h3>
              <div className="chart-container">
                {staffStats.weeklyActivity?.map((value, index) => (
                  <div key={index} className="chart-bar">
                    <div 
                      className="chart-bar-fill"
                      style={{ height: `${(value / 15) * 100}%` }}
                    ></div>
                    <span className="chart-label">
                      {['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥'][index]}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Notifications Tab */}
        {activeTab === 'notifications' && (
          <div className="notifications-tab">
            <div className="notifications-header">
              <h2>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
              <div className="notification-filters">
                <button className="filter-btn active">–í—Å—ñ</button>
                <button className="filter-btn">–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ</button>
                <button className="filter-btn">–°—å–æ–≥–æ–¥–Ω—ñ</button>
              </div>
            </div>

            <div className="notifications-list">
              {notifications.map(notification => (
                <div 
                  key={notification.id} 
                  className={`notification-item ${notification.isRead ? 'read' : 'unread'}`}
                >
                  <div className="notification-icon">
                    {notification.type === 'visit' && 'üë§'}
                    {notification.type === 'music' && 'üéµ'}
                    {notification.type === 'tip' && 'üí∞'}
                    {notification.type === 'rating' && '‚≠ê'}
                    {notification.type === 'success' && '‚úÖ'}
                  </div>
                  <div className="notification-content">
                    <p>{notification.message}</p>
                    <span className="notification-time">{notification.time}</span>
                  </div>
                  <div className="notification-actions">
                    {!notification.isRead && (
                      <button 
                        className="mark-read-btn"
                        onClick={() => markAsRead(notification.id)}
                      >
                        üëÅÔ∏è
                      </button>
                    )}
                    <button 
                      className="delete-btn"
                      onClick={() => deleteNotification(notification.id)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </div>
              ))}
              {notifications.length === 0 && (
                <div className="empty-state">
                  <p>üîï –ù–µ–º–∞—î —É–≤–µ–¥–æ–º–ª–µ–Ω—å</p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default StaffDashboard;