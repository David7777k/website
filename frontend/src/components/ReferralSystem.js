// ReferralSystem.js
import React, { useState, useEffect } from 'react';
import './ReferralSystem.css';

const ReferralSystem = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [userLevel, setUserLevel] = useState(3);
  const [userTokens, setUserTokens] = useState(2450);
  const [referralCode] = useState('LOUNGE2024XYZ');
  const [showCopyToast, setShowCopyToast] = useState(false);

  // Mock data
  const [stats, setStats] = useState({
    totalReferrals: 23,
    activeReferrals: 18,
    totalTokensEarned: 5670,
    currentLevel: 3,
    nextLevelProgress: 75
  });

  const [earningHistory, setEarningHistory] = useState([
    {
      id: 1,
      type: 'referral',
      description: '–ù–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª: –û–ª–µ–∫—Å–∞–Ω–¥—Ä –ö.',
      tokens: 150,
      date: '2024-01-15T10:30:00Z',
      icon: 'üë•'
    },
    {
      id: 2,
      type: 'bonus',
      description: '–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
      tokens: 50,
      date: '2024-01-14T15:45:00Z',
      icon: 'üéÅ'
    },
    {
      id: 3,
      type: 'challenge',
      description: '–í–∏–∫–ª–∏–∫ "5 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤"',
      tokens: 200,
      date: '2024-01-13T09:20:00Z',
      icon: 'üèÜ'
    },
    {
      id: 4,
      type: 'referral',
      description: '–ù–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª: –ú–∞—Ä—ñ—è –í.',
      tokens: 150,
      date: '2024-01-12T14:10:00Z',
      icon: 'üë•'
    },
    {
      id: 5,
      type: 'level',
      description: '–î–æ—Å—è–≥–Ω—É—Ç–æ 3-–π —Ä—ñ–≤–µ–Ω—å',
      tokens: 300,
      date: '2024-01-10T16:00:00Z',
      icon: '‚≠ê'
    }
  ]);

  const [challenges, setChallenges] = useState([
    {
      id: 1,
      title: '–ü–µ—Ä—à–∏–π –†–µ—Ñ–µ—Ä–∞–ª',
      description: '–ó–∞–ø—Ä–æ—Å—ñ—Ç—å —Å–≤–æ–≥–æ –ø–µ—Ä—à–æ–≥–æ –¥—Ä—É–≥–∞',
      reward: 100,
      progress: 100,
      maxProgress: 1,
      completed: true
    },
    {
      id: 2,
      title: '–ö–æ–º–∞–Ω–¥–∞ –∑ 5 –æ—Å—ñ–±',
      description: '–ó–∞–ª—É—á—ñ—Ç—å 5 –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤',
      reward: 250,
      progress: 3,
      maxProgress: 5,
      completed: false
    },
    {
      id: 3,
      title: '–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –ú–∞–π—Å—Ç–µ—Ä',
      description: '–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤ 3 —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂–∞—Ö',
      reward: 150,
      progress: 2,
      maxProgress: 3,
      completed: false
    },
    {
      id: 4,
      title: '–ú—ñ—Å—è—á–Ω–∏–π –ß–µ–º–ø—ñ–æ–Ω',
      description: '–ó–∞–ª—É—á—ñ—Ç—å 10 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å',
      reward: 500,
      progress: 7,
      maxProgress: 10,
      completed: false
    }
  ]);

  const [myReferrals, setMyReferrals] = useState([
    {
      id: 1,
      name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ö.',
      email: 'alex.k@example.com',
      joinDate: '2024-01-15',
      status: 'active',
      tokensEarned: 150,
      visits: 12
    },
    {
      id: 2,
      name: '–ú–∞—Ä—ñ—è –í.',
      email: 'maria.v@example.com',
      joinDate: '2024-01-12',
      status: 'active',
      tokensEarned: 150,
      visits: 8
    },
    {
      id: 3,
      name: '–î–º–∏—Ç—Ä–æ –ü.',
      email: 'dmitro.p@example.com',
      joinDate: '2024-01-08',
      status: 'pending',
      tokensEarned: 0,
      visits: 1
    },
    {
      id: 4,
      name: '–ê–Ω–Ω–∞ –°.',
      email: 'anna.s@example.com',
      joinDate: '2024-01-05',
      status: 'active',
      tokensEarned: 150,
      visits: 15
    }
  ]);

  const [leaderboard, setLeaderboard] = useState([
    { rank: 1, name: '–í–æ–ª–æ–¥–∏–º–∏—Ä –ö.', referrals: 47, tokens: 8950 },
    { rank: 2, name: '–ö–∞—Ç–µ—Ä–∏–Ω–∞ –ú.', referrals: 39, tokens: 7420 },
    { rank: 3, name: '–ê–Ω–¥—Ä—ñ–π –õ.', referrals: 35, tokens: 6830 },
    { rank: 4, name: '–í–∏', referrals: 23, tokens: 5670 },
    { rank: 5, name: '–û–ª—å–≥–∞ –†.', referrals: 18, tokens: 4250 }
  ]);

  const levels = [
    { level: 1, name: '–ù–æ–≤–∞—á–æ–∫', minReferrals: 0, bonus: 1.0 },
    { level: 2, name: '–î—Ä—É–≥', minReferrals: 5, bonus: 1.2 },
    { level: 3, name: '–ê–º–±–∞—Å–∞–¥–æ—Ä', minReferrals: 15, bonus: 1.5 },
    { level: 4, name: '–ï–∫—Å–ø–µ—Ä—Ç', minReferrals: 30, bonus: 1.8 },
    { level: 5, name: '–õ–µ–≥–µ–Ω–¥–∞', minReferrals: 50, bonus: 2.0 }
  ];

  const getCurrentLevel = () => levels.find(l => l.level === userLevel) || levels[0];
  const getNextLevel = () => levels.find(l => l.level === userLevel + 1);

  const handleCopyReferralLink = async () => {
    const referralLink = `https://our-lounge.com/join?ref=${referralCode}`;
    
    try {
      await navigator.clipboard.writeText(referralLink);
      setShowCopyToast(true);
      setTimeout(() => setShowCopyToast(false), 3000);
    } catch (err) {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = referralLink;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setShowCopyToast(true);
      setTimeout(() => setShowCopyToast(false), 3000);
    }
  };

  const handleSocialShare = (platform) => {
    const referralLink = `https://our-lounge.com/join?ref=${referralCode}`;
    const shareText = "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –ª–∞—É–Ω–∂—É –≤ –º—ñ—Å—Ç—ñ! –û—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.";
    
    const shareUrls = {
      facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(referralLink)}`,
      twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(referralLink)}`,
      whatsapp: `https://wa.me/?text=${encodeURIComponent(shareText + ' ' + referralLink)}`,
      telegram: `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`
    };

    if (shareUrls[platform]) {
      window.open(shareUrls[platform], '_blank', 'width=600,height=400');
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('uk-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const formatTimeAgo = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return '–©–æ–π–Ω–æ';
    if (diffInHours < 24) return `${diffInHours} –≥–æ–¥ —Ç–æ–º—É`;
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays} –¥–Ω —Ç–æ–º—É`;
    return formatDate(dateString);
  };

  const renderOverviewTab = () => (
    <div className="overview-content">
      {/* Stats Cards */}
      <div className="stats-cards">
        <div className="stat-card">
          <div className="stat-header">
            <h3>–ó–∞–≥–∞–ª—å–Ω—ñ –†–µ—Ñ–µ—Ä–∞–ª–∏</h3>
            <div className="stat-icon">üë•</div>
          </div>
          <div className="stat-value">{stats.totalReferrals}</div>
          <div className="stat-change positive">+3 —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è</div>
        </div>

        <div className="stat-card">
          <div className="stat-header">
            <h3>–ê–∫—Ç–∏–≤–Ω—ñ –†–µ—Ñ–µ—Ä–∞–ª–∏</h3>
            <div className="stat-icon">‚úÖ</div>
          </div>
          <div className="stat-value">{stats.activeReferrals}</div>
          <div className="stat-change positive">+2 —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è</div>
        </div>

        <div className="stat-card">
          <div className="stat-header">
            <h3>–ó–∞—Ä–æ–±–ª–µ–Ω–æ –¢–æ–∫–µ–Ω—ñ–≤</h3>
            <div className="stat-icon">ü™ô</div>
          </div>
          <div className="stat-value">{stats.totalTokensEarned}</div>
          <div className="stat-change positive">+450 —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è</div>
        </div>

        <div className="stat-card">
          <div className="stat-header">
            <h3>–ü–æ—Ç–æ—á–Ω–∏–π –†—ñ–≤–µ–Ω—å</h3>
            <div className="stat-icon">‚≠ê</div>
          </div>
          <div className="stat-value">{getCurrentLevel().name}</div>
          <div className="stat-change positive">–†—ñ–≤–µ–Ω—å {userLevel}</div>
        </div>
      </div>

      {/* Level Progress */}
      <div className="level-progress">
        <h3>–ü—Ä–æ–≥—Ä–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è</h3>
        <div className="level-info">
          <span className="current-level">–†—ñ–≤–µ–Ω—å {userLevel}: {getCurrentLevel().name}</span>
          {getNextLevel() && (
            <span className="next-level">–ù–∞—Å—Ç—É–ø–Ω–∏–π: {getNextLevel().name}</span>
          )}
        </div>
        <div className="progress-bar">
          <div 
            className="progress-fill" 
            style={{ width: `${stats.nextLevelProgress}%` }}
          ></div>
        </div>
        <div className="progress-text">
          {getNextLevel() ? 
            `${stats.totalReferrals}/${getNextLevel().minReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤` :
            '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—è–≥–Ω—É—Ç–æ!'
          }
        </div>
      </div>

      {/* Quick Actions */}
      <div className="quick-actions">
        <div className="action-card">
          <h3>–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –î—Ä—É–∑—ñ–≤</h3>
          <p>–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º –∫–æ–¥–æ–º —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –±–æ–Ω—É—Å–∏</p>
          <button 
            className="action-btn"
            onClick={() => setActiveTab('referrals')}
          >
            üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è
          </button>
        </div>

        <div className="action-card">
          <h3>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –í–∏–∫–ª–∏–∫–∏</h3>
          <p>–í–∏–∫–æ–Ω—É–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏</p>
          <button 
            className="action-btn secondary"
            onClick={() => setActiveTab('tokens')}
          >
            üèÜ –í–∏–∫–ª–∏–∫–∏
          </button>
        </div>

        <div className="action-card">
          <h3>–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¢–æ–∫–µ–Ω–∏</h3>
          <p>–û–±–º—ñ–Ω—è–π—Ç–µ —Ç–æ–∫–µ–Ω–∏ –Ω–∞ –∑–Ω–∏–∂–∫–∏ —Ç–∞ –±–æ–Ω—É—Å–∏</p>
          <button className="action-btn secondary">
            üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω
          </button>
        </div>
      </div>
    </div>
  );

  const renderTokensTab = () => (
    <div className="tokens-content">
      <div>
        {/* Token Balance */}
        <div className="token-balance">
          <div className="balance-amount">{userTokens}</div>
          <div className="balance-label">–í–∞—à—ñ –¢–æ–∫–µ–Ω–∏</div>
        </div>

        {/* Earning History */}
        <div className="earning-history">
          <h3>–Ü—Å—Ç–æ—Ä—ñ—è –ó–∞—Ä–æ–±—ñ—Ç–∫—É</h3>
          {earningHistory.map(item => (
            <div key={item.id} className="history-item">
              <div className="history-info">
                <div className="history-icon">{item.icon}</div>
                <div className="history-details">
                  <h4>{item.description}</h4>
                  <p>{formatTimeAgo(item.date)}</p>
                </div>
              </div>
              <div className="history-tokens">+{item.tokens}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Challenges */}
      <div className="challenges-section">
        <h3>–ê–∫—Ç–∏–≤–Ω—ñ –í–∏–∫–ª–∏–∫–∏</h3>
        {challenges.map(challenge => (
          <div key={challenge.id} className="challenge-item">
            <div className="challenge-header">
              <h4 className="challenge-title">{challenge.title}</h4>
              <div className="challenge-reward">+{challenge.reward} —Ç–æ–∫–µ–Ω—ñ–≤</div>
            </div>
            <p className="challenge-description">{challenge.description}</p>
            <div className="challenge-progress">
              <div 
                className="challenge-progress-fill"
                style={{ width: `${(challenge.progress / challenge.maxProgress) * 100}%` }}
              ></div>
            </div>
            <div className="challenge-progress-text">
              {challenge.progress}/{challenge.maxProgress} 
              {challenge.completed && ' ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderReferralsTab = () => (
    <div className="referrals-content">
      <div>
        {/* Share Section */}
        <div className="share-section">
          <h3>–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –∑ –î—Ä—É–∑—è–º–∏</h3>
          
          <div className="referral-link">
            <input
              type="text"
              className="link-input"
              value={`https://our-lounge.com/join?ref=${referralCode}`}
              readOnly
            />
            <button className="copy-btn" onClick={handleCopyReferralLink}>
              üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏
            </button>
          </div>

          <div className="social-share">
            <button 
              className="social-btn facebook"
              onClick={() => handleSocialShare('facebook')}
            >
              üìò Facebook
            </button>
            <button 
              className="social-btn twitter"
              onClick={() => handleSocialShare('twitter')}
            >
              üê¶ Twitter
            </button>
            <button 
              className="social-btn whatsapp"
              onClick={() => handleSocialShare('whatsapp')}
            >
              üí¨ WhatsApp
            </button>
            <button 
              className="social-btn telegram"
              onClick={() => handleSocialShare('telegram')}
            >
              ‚úàÔ∏è Telegram
            </button>
          </div>
        </div>

        {/* My Referrals */}
        <div className="referral-list">
          <h3>–ú–æ—ó –†–µ—Ñ–µ—Ä–∞–ª–∏ ({myReferrals.length})</h3>
          {myReferrals.map(referral => (
            <div key={referral.id} className="referral-item">
              <div className="referral-info">
                <div className="referral-avatar">
                  {referral.name.charAt(0)}
                </div>
                <div className="referral-details">
                  <h4>{referral.name}</h4>
                  <p>–ü—Ä–∏—î–¥–Ω–∞–≤—Å—è: {formatDate(referral.joinDate)}</p>
                </div>
              </div>
              <div className="referral-status">
                <span className={`status-badge ${referral.status}`}>
                  {referral.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–û—á—ñ–∫—É—î'}
                </span>
                <div className="earned-tokens">+{referral.tokensEarned}</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Leaderboard */}
      <div className="leaderboard">
        <h3>–¢–æ–ø –†–µ—Ñ–µ—Ä–∞–ª—ñ–≤</h3>
        {leaderboard.map(user => (
          <div key={user.rank} className="leaderboard-item">
            <div className={`rank ${user.rank <= 3 ? 'top3' : ''}`}>
              #{user.rank}
            </div>
            <div className="user-info">
              <h4>{user.name}</h4>
              <p>{user.tokens} —Ç–æ–∫–µ–Ω—ñ–≤</p>
            </div>
            <div className="referral-count">{user.referrals}</div>
          </div>
        ))}
      </div>
    </div>
  );

  return (
    <div className="referral-system">
      <div className="referral-container">
        {/* Header */}
        <div className="referral-header">
          <h1>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ –°–∏—Å—Ç–µ–º–∞</h1>
          <p>–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –∑–∞—Ä–æ–±–ª—è–π—Ç–µ —Ä–∞–∑–æ–º</p>
        </div>

        {/* Navigation Tabs */}
        <div className="referral-tabs">
          <button 
            className={`tab-btn ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            –û–≥–ª—è–¥
          </button>
          <button 
            className={`tab-btn ${activeTab === 'tokens' ? 'active' : ''}`}
            onClick={() => setActiveTab('tokens')}
          >
            –¢–æ–∫–µ–Ω–∏
          </button>
          <button 
            className={`tab-btn ${activeTab === 'referrals' ? 'active' : ''}`}
            onClick={() => setActiveTab('referrals')}
          >
            –†–µ—Ñ–µ—Ä–∞–ª–∏
          </button>
        </div>

        {/* Tab Content */}
        {activeTab === 'overview' && renderOverviewTab()}
        {activeTab === 'tokens' && renderTokensTab()}
        {activeTab === 'referrals' && renderReferralsTab()}

        {/* Copy Toast */}
        {showCopyToast && (
          <div className="copy-toast">
            ‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!
          </div>
        )}
      </div>
    </div>
  );
};

export default ReferralSystem;