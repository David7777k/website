'use client'

import React, { useState, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { motion } from 'framer-motion'
import { Sparkles, ArrowLeft } from 'lucide-react'
import Link from 'next/link'
import WheelModal from '../components/WheelModal'
import Button from '../components/ui/Button'
import Card from '../components/ui/Card'
import Badge from '../components/ui/Badge'

export default function WheelPage() {
  const { data: session, status } = useSession()
  const router = useRouter()
  const [showWheel, setShowWheel] = useState(false)
  const [wheelStatus, setWheelStatus] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/login?callbackUrl=/wheel')
      return
    }

    if (status === 'authenticated') {
      fetchWheelStatus()
    }
  }, [status, router])

  const fetchWheelStatus = async () => {
    try {
      setLoading(true)
      const res = await fetch('/api/wheel/status')
      const data = await res.json()
      setWheelStatus(data)
    } catch (error) {
      console.error('Failed to fetch wheel status:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleWheelClose = () => {
    setShowWheel(false)
    fetchWheelStatus() // Refresh status after spin
  }

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-[80vh] flex items-center justify-center">
        <div className="w-12 h-12 border-4 border-accent/30 border-t-accent rounded-full animate-spin" />
      </div>
    )
  }

  return (
    <div className="space-y-8 page-transition">
      {/* Header */}
      <div className="flex items-center justify-between">
        <Link href="/" className="flex items-center gap-2 text-text-muted hover:text-accent transition-colors">
          <ArrowLeft size={20} />
          <span>–ù–∞–∑–∞–¥</span>
        </Link>
      </div>

      {/* Hero Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center space-y-4"
      >
        <motion.div
          className="text-8xl"
          animate={{
            rotate: [0, 10, -10, 0],
            scale: [1, 1.1, 1]
          }}
          transition={{
            duration: 3,
            repeat: Infinity,
            ease: 'easeInOut'
          }}
        >
          üé°
        </motion.div>
        
        <h1 className="text-4xl md:text-6xl font-black text-gradient">
          –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω–∏
        </h1>
        
        <p className="text-xl text-text-muted max-w-2xl mx-auto">
          –ö—Ä—É—Ç—ñ—Ç—å –∫–æ–ª–µ—Å–æ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –∑–Ω–∏–∂–∫–∏, –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –Ω–∞–ø–æ—ó —Ç–∞ —ñ–Ω—à—ñ –ø—Ä–∏–∑–∏!
        </p>
      </motion.div>

      {/* Status Card */}
      <Card className="max-w-2xl mx-auto">
        <div className="space-y-6 text-center">
          {wheelStatus?.canSpin ? (
            <>
              <div className="space-y-3">
                <Badge variant="accent" className="text-base">
                  <Sparkles size={16} />
                  –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Å–ø—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π!
                </Badge>
                {wheelStatus.lastPrize && (
                  <p className="text-sm text-text-muted">
                    –û—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏–∑: <span className="text-accent font-semibold">{wheelStatus.lastPrize}</span>
                  </p>
                )}
              </div>
              
              <Button
                variant="primary"
                size="lg"
                onClick={() => setShowWheel(true)}
                className="text-xl px-12 py-6 shadow-glow-strong"
              >
                <Sparkles size={24} />
                –ö—Ä—É—Ç–∏—Ç–∏ –∫–æ–ª–µ—Å–æ
              </Button>
            </>
          ) : (
            <>
              <div className="space-y-3">
                <Badge variant="warn" className="text-base">
                  ‚è≥ –ö–æ–ª–µ—Å–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
                </Badge>
                {wheelStatus?.timeLeft && (
                  <div className="space-y-2">
                    <p className="text-lg font-semibold text-text-muted">
                      –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ø—ñ–Ω —á–µ—Ä–µ–∑:
                    </p>
                    <div className="flex items-center justify-center gap-4 text-accent">
                      <div className="space-y-1">
                        <div className="text-3xl font-black">{wheelStatus.timeLeft.days}</div>
                        <div className="text-xs text-text-muted">–¥–Ω—ñ–≤</div>
                      </div>
                      <div className="text-2xl">:</div>
                      <div className="space-y-1">
                        <div className="text-3xl font-black">{wheelStatus.timeLeft.hours}</div>
                        <div className="text-xs text-text-muted">–≥–æ–¥–∏–Ω</div>
                      </div>
                      <div className="text-2xl">:</div>
                      <div className="space-y-1">
                        <div className="text-3xl font-black">{wheelStatus.timeLeft.minutes}</div>
                        <div className="text-xs text-text-muted">—Ö–≤–∏–ª–∏–Ω</div>
                      </div>
                    </div>
                  </div>
                )}
                {wheelStatus?.lastPrize && (
                  <p className="text-sm text-text-muted mt-4">
                    –í–∞—à –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–∏–∑: <span className="text-accent font-semibold">{wheelStatus.lastPrize}</span>
                  </p>
                )}
              </div>
              
              <Button variant="secondary" size="lg" disabled className="text-xl px-12 py-6">
                –ö–æ–ª–µ—Å–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
              </Button>
            </>
          )}
        </div>
      </Card>

      {/* Rules */}
      <Card className="max-w-2xl mx-auto">
        <div className="space-y-4">
          <h3 className="text-xl font-bold text-accent flex items-center gap-2">
            <Sparkles size={20} />
            –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä–∏
          </h3>
          <ul className="space-y-3 text-text-muted">
            <li className="flex items-start gap-3">
              <span className="text-accent font-bold">‚úì</span>
              <span>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è —Ä–∞–∑ –Ω–∞ 7 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–∑–∏—Ç—É</span>
            </li>
            <li className="flex items-start gap-3">
              <span className="text-accent font-bold">‚úì</span>
              <span>–ü—Ä–∏–∑–∏ –¥—ñ—é—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º 7 –¥–Ω—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–≥—Ä–∞—à—É</span>
            </li>
            <li className="flex items-start gap-3">
              <span className="text-accent font-bold">‚úì</span>
              <span>–ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑</span>
            </li>
            <li className="flex items-start gap-3">
              <span className="text-accent font-bold">‚úì</span>
              <span>–í—Å—ñ –≤–∏–≥—Ä–∞—à—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ —Ä–æ–∑–¥—ñ–ª—ñ "–ë–æ–Ω—É—Å–∏" –≤–∞—à–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é</span>
            </li>
          </ul>
        </div>
      </Card>

      {/* Prizes Preview */}
      <Card className="max-w-2xl mx-auto">
        <div className="space-y-4">
          <h3 className="text-xl font-bold text-accent">üéÅ –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏–∑–∏</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {[
              { icon: 'üí®', text: '–ó–Ω–∏–∂–∫–∞ –Ω–∞ –∫–∞–ª—å—è–Ω' },
              { icon: 'üçΩÔ∏è', text: '–ó–Ω–∏–∂–∫–∞ –Ω–∞ –∫—É—Ö–Ω—é' },
              { icon: 'üçµ', text: '–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —á–∞–π' },
              { icon: 'üéµ', text: '–¢—Ä–µ–∫ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ' },
              { icon: 'üçπ', text: '–ó–Ω–∏–∂–∫–∞ –Ω–∞ –∫–æ–∫—Ç–µ–π–ª—å' },
              { icon: 'üëë', text: 'VIP –ø—Ä–∏–≤—ñ–ª–µ—ó' }
            ].map((prize, i) => (
              <div key={i} className="glass-card p-4 text-center space-y-2 hover:border-accent/50 transition-colors">
                <div className="text-3xl">{prize.icon}</div>
                <div className="text-sm font-medium text-text-muted">{prize.text}</div>
              </div>
            ))}
          </div>
        </div>
      </Card>

      {/* Wheel Modal */}
      {showWheel && (
        <WheelModal open={showWheel} onClose={handleWheelClose} />
      )}
    </div>
  )
}
