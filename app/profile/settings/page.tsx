'use client'

import { useState } from 'react'
import { useSession } from 'next-auth/react'
import { useRouter } from 'next/navigation'

export default function SettingsPage() {
  const { data: session } = useSession()
  const router = useRouter()
  
  const [settings, setSettings] = useState({
    name: session?.user?.name || '',
    email: session?.user?.email || '',
    phone: '',
    notifications: {
      email: true,
      push: true,
      sms: false,
      promos: true,
      events: true,
    },
    privacy: {
      showProfile: true,
      showStats: false,
      allowTags: true,
    },
    smokeTheme: false,
  })

  const [activeTab, setActiveTab] = useState<'profile' | 'notifications' | 'privacy' | 'preferences'>('profile')
  const [isSaving, setIsSaving] = useState(false)
  const [saved, setSaved] = useState(false)

  const handleSave = async () => {
    setIsSaving(true)
    // Simulate API call
    await new Promise(resolve => setTimeout(resolve, 1000))
    setIsSaving(false)
    setSaved(true)
    setTimeout(() => setSaved(false), 3000)
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-black">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <button
            onClick={() => router.back()}
            className="p-3 bg-gray-800 border border-gray-700 rounded-xl hover:bg-gray-700 transition-all"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <div>
            <h1 className="text-3xl font-black text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-purple-600">
              –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </h1>
            <p className="text-gray-400">–ö–µ—Ä—É–π—Ç–µ —Å–≤–æ—ó–º –∞–∫–∞—É–Ω—Ç–æ–º</p>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex gap-2 mb-6 overflow-x-auto pb-2">
          {[
            { id: 'profile', icon: 'üë§', label: '–ü—Ä–æ—Ñ—ñ–ª—å' },
            { id: 'notifications', icon: 'üîî', label: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è' },
            { id: 'privacy', icon: 'üîí', label: '–ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å' },
            { id: 'preferences', icon: '‚öôÔ∏è', label: '–í–ø–æ–¥–æ–±–∞–Ω–Ω—è' },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as typeof activeTab)}
              className={`px-6 py-3 rounded-xl font-semibold whitespace-nowrap transition-all ${
                activeTab === tab.id
                  ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg'
                  : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
              }`}
            >
              {tab.icon} {tab.label}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="bg-gradient-to-br from-gray-800 to-gray-900 rounded-3xl p-6 md:p-8 shadow-2xl border border-gray-700 space-y-6">
          {/* Profile Tab */}
          {activeTab === 'profile' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-white flex items-center gap-2">
                üë§ –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
              </h2>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-gray-300 mb-2">
                    –Ü–º'—è
                  </label>
                  <input
                    type="text"
                    value={settings.name}
                    onChange={(e) => setSettings({ ...settings, name: e.target.value })}
                    className="w-full px-4 py-3 bg-gray-900/50 border border-gray-700 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-300 mb-2">
                    Email
                  </label>
                  <input
                    type="email"
                    value={settings.email}
                    onChange={(e) => setSettings({ ...settings, email: e.target.value })}
                    className="w-full px-4 py-3 bg-gray-900/50 border border-gray-700 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-300 mb-2">
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <input
                    type="tel"
                    value={settings.phone}
                    onChange={(e) => setSettings({ ...settings, phone: e.target.value })}
                    placeholder="+380 XX XXX XX XX"
                    className="w-full px-4 py-3 bg-gray-900/50 border border-gray-700 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-xl p-4">
                <p className="text-yellow-400 text-sm">
                  üí° –î–µ—è–∫—ñ –∑–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ email
                </p>
              </div>
            </div>
          )}

          {/* Notifications Tab */}
          {activeTab === 'notifications' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-white flex items-center gap-2">
                üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
              </h2>

              <div className="space-y-4">
                {[
                  { key: 'email', label: 'Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', icon: 'üìß' },
                  { key: 'push', label: 'Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', icon: 'üì±' },
                  { key: 'sms', label: 'SMS —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', icon: 'üí¨' },
                  { key: 'promos', label: '–ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏', icon: 'üéÅ' },
                  { key: 'events', label: '–ü–æ–¥—ñ—ó —Ç–∞ –∑–∞—Ö–æ–¥–∏', icon: 'üìÖ' },
                ].map((item) => (
                  <label
                    key={item.key}
                    className="flex items-center justify-between p-4 bg-gray-900/50 rounded-xl border border-gray-700 cursor-pointer hover:bg-gray-900 transition-all"
                  >
                    <span className="flex items-center gap-3 text-gray-300">
                      <span className="text-2xl">{item.icon}</span>
                      {item.label}
                    </span>
                    <input
                      type="checkbox"
                      checked={settings.notifications[item.key as keyof typeof settings.notifications]}
                      onChange={(e) => setSettings({
                        ...settings,
                        notifications: {
                          ...settings.notifications,
                          [item.key]: e.target.checked
                        }
                      })}
                      className="w-6 h-6 rounded accent-blue-500"
                    />
                  </label>
                ))}
              </div>
            </div>
          )}

          {/* Privacy Tab */}
          {activeTab === 'privacy' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-white flex items-center gap-2">
                üîí –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å
              </h2>

              <div className="space-y-4">
                {[
                  { key: 'showProfile', label: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —ñ–Ω—à–∏–º', icon: 'üëÅÔ∏è' },
                  { key: 'showStats', label: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', icon: 'üìä' },
                  { key: 'allowTags', label: '–î–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–∑–Ω–∞—á–∞—Ç–∏ –≤ –ø–æ—Å—Ç–∞—Ö', icon: 'üè∑Ô∏è' },
                ].map((item) => (
                  <label
                    key={item.key}
                    className="flex items-center justify-between p-4 bg-gray-900/50 rounded-xl border border-gray-700 cursor-pointer hover:bg-gray-900 transition-all"
                  >
                    <span className="flex items-center gap-3 text-gray-300">
                      <span className="text-2xl">{item.icon}</span>
                      {item.label}
                    </span>
                    <input
                      type="checkbox"
                      checked={settings.privacy[item.key as keyof typeof settings.privacy]}
                      onChange={(e) => setSettings({
                        ...settings,
                        privacy: {
                          ...settings.privacy,
                          [item.key]: e.target.checked
                        }
                      })}
                      className="w-6 h-6 rounded accent-blue-500"
                    />
                  </label>
                ))}
              </div>

              <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-4">
                <p className="text-blue-400 text-sm">
                  üîê –í–∞—à—ñ –¥–∞–Ω—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ —Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º
                </p>
              </div>
            </div>
          )}

          {/* Preferences Tab */}
          {activeTab === 'preferences' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-white flex items-center gap-2">
                ‚öôÔ∏è –í–ø–æ–¥–æ–±–∞–Ω–Ω—è
              </h2>

              <div className="space-y-4">
                <label className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 border border-purple-500/30 rounded-xl cursor-pointer hover:from-purple-500/20 hover:to-pink-500/20 transition-all">
                  <span className="flex items-center gap-3">
                    <span className="text-3xl">üí®</span>
                    <div>
                      <div className="text-white font-semibold">–î–∏–º–æ–≤–∞ —Ç–µ–º–∞</div>
                      <div className="text-gray-400 text-sm">–ê–Ω—ñ–º–æ–≤–∞–Ω–∏–π —Ñ–æ–Ω –∑ –¥–∏–º–æ–º</div>
                    </div>
                  </span>
                  <input
                    type="checkbox"
                    checked={settings.smokeTheme}
                    onChange={(e) => setSettings({ ...settings, smokeTheme: e.target.checked })}
                    className="w-6 h-6 rounded accent-purple-500"
                  />
                </label>

                <div className="p-4 bg-gray-900/50 rounded-xl border border-gray-700">
                  <label className="block text-sm font-semibold text-gray-300 mb-2">
                    –ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                  </label>
                  <select className="w-full px-4 py-3 bg-gray-800 border border-gray-700 rounded-xl text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option>üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                    <option>üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                    <option>üá¨üáß English</option>
                  </select>
                </div>

                <div className="p-4 bg-gray-900/50 rounded-xl border border-gray-700">
                  <label className="block text-sm font-semibold text-gray-300 mb-2">
                    –£–ª—é–±–ª–µ–Ω—ñ —Å–º–∞–∫–∏
                  </label>
                  <div className="flex flex-wrap gap-2 mt-3">
                    {['üçì –ü–æ–ª—É–Ω–∏—Ü—è', 'üçâ –ö–∞–≤—É–Ω', 'üçä –ê–ø–µ–ª—å—Å–∏–Ω', 'üçã –õ–∏–º–æ–Ω', 'üçá –í–∏–Ω–æ–≥—Ä–∞–¥'].map((flavor) => (
                      <button
                        key={flavor}
                        className="px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-sm text-gray-300 hover:bg-blue-500/20 hover:border-blue-500 transition-all"
                      >
                        {flavor}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Save Button */}
          <div className="pt-4 border-t border-gray-700 flex gap-4">
            <button
              onClick={handleSave}
              disabled={isSaving}
              className={`flex-1 py-4 rounded-2xl font-bold text-lg transition-all ${
                isSaving
                  ? 'bg-gray-700 text-gray-400 cursor-wait'
                  : saved
                  ? 'bg-green-500 text-white'
                  : 'bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:shadow-2xl hover:scale-105'
              }`}
            >
              {isSaving ? '‚è≥ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : saved ? '‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ!' : 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏'}
            </button>
          </div>
        </div>

        {/* Danger Zone */}
        <div className="mt-6 bg-gradient-to-br from-red-500/10 to-red-600/10 border border-red-500/30 rounded-2xl p-6">
          <h3 className="text-lg font-bold text-red-400 mb-4 flex items-center gap-2">
            ‚ö†Ô∏è –ù–µ–±–µ–∑–ø–µ—á–Ω–∞ –∑–æ–Ω–∞
          </h3>
          <div className="space-y-3">
            <button className="w-full md:w-auto px-6 py-3 bg-red-500/20 border border-red-500 text-red-400 rounded-xl hover:bg-red-500/30 transition-all">
              üîÑ –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </button>
            <button className="w-full md:w-auto px-6 py-3 bg-red-600/20 border border-red-600 text-red-400 rounded-xl hover:bg-red-600/30 transition-all ml-0 md:ml-3">
              üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}