'use client'

import { useState, useEffect } from 'react'
import { useSession, signOut } from 'next-auth/react'
import { useRouter } from 'next/navigation'
import { motion } from 'framer-motion'

export default function SettingsPage() {
  const { data: session } = useSession()
  const router = useRouter()
  
  const [settings, setSettings] = useState({
    name: session?.user?.name || '',
    email: session?.user?.email || '',
    phone: '',
    notifications: {
      email: true,
      push: true,
      sms: false,
      promos: true,
      events: true,
    },
    privacy: {
      showProfile: true,
      showStats: false,
      allowTags: true,
    },
    smokeTheme: false,
  })

  const [activeTab, setActiveTab] = useState<'profile' | 'notifications' | 'privacy' | 'preferences'>('profile')
  const [isSaving, setIsSaving] = useState(false)
  const [saved, setSaved] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [deleteConfirm, setDeleteConfirm] = useState('')
  const [deleteReason, setDeleteReason] = useState('')
  const [isDeleting, setIsDeleting] = useState(false)

  useEffect(() => {
    // Fetch user settings
    fetchSettings()
  }, [])

  const fetchSettings = async () => {
    try {
      const response = await fetch('/api/user/profile')
      if (response.ok) {
        const data = await response.json()
        setSettings(prev => ({
          ...prev,
          name: data.name || '',
          email: data.email || '',
          phone: data.phone || '',
          smokeTheme: data.smokeThemeEnabled || false
        }))
      }
    } catch (error) {
      console.error('Error fetching settings:', error)
    }
  }

  const handleSave = async () => {
    setIsSaving(true)
    try {
      const response = await fetch('/api/user/profile', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: settings.name,
          phone: settings.phone,
          smokeThemeEnabled: settings.smokeTheme
        })
      })

      if (response.ok) {
        setSaved(true)
        setTimeout(() => setSaved(false), 3000)
      }
    } catch (error) {
      console.error('Error saving settings:', error)
    } finally {
      setIsSaving(false)
    }
  }

  const handleDeleteAccount = async () => {
    if (deleteConfirm !== '–í–ò–î–ê–õ–ò–¢–ò') {
      alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å "–í–ò–î–ê–õ–ò–¢–ò" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
      return
    }

    setIsDeleting(true)
    try {
      const response = await fetch('/api/user/delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          confirmPassword: 'confirmed',
          reason: deleteReason
        })
      })

      if (response.ok) {
        alert('–ê–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
        await signOut({ callbackUrl: '/' })
      } else {
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É')
      }
    } catch (error) {
      console.error('Error deleting account:', error)
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç—É')
    } finally {
      setIsDeleting(false)
      setShowDeleteModal(false)
    }
  }

  const fadeInUp = {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    transition: { duration: 0.4 }
  }

  return (
    <div className="min-h-screen bg-base page-transition">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* Header */}
        <motion.div 
          className="flex items-center gap-4 mb-8"
          initial="initial"
          animate="animate"
          variants={fadeInUp}
        >
          <button
            onClick={() => router.back()}
            className="p-3 glass-card hover:bg-surface transition-all tap-target"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <div>
            <h1 className="text-3xl font-black text-gradient">
              –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </h1>
            <p className="text-text-muted">–ö–µ—Ä—É–π —Å–≤–æ—ó–º –∞–∫–∞—É–Ω—Ç–æ–º</p>
          </div>
        </motion.div>

        {/* Tabs */}
        <motion.div 
          className="flex gap-2 mb-6 overflow-x-auto pb-2 scrollbar-hide"
          initial="initial"
          animate="animate"
          variants={fadeInUp}
        >
          {[
            { id: 'profile', icon: 'üë§', label: '–ü—Ä–æ—Ñ—ñ–ª—å' },
            { id: 'notifications', icon: 'üîî', label: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è' },
            { id: 'privacy', icon: 'üîí', label: '–ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å' },
            { id: 'preferences', icon: '‚öôÔ∏è', label: '–í–ø–æ–¥–æ–±–∞–Ω–Ω—è' },
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as typeof activeTab)}
              className={`px-6 py-3 rounded-xl font-semibold whitespace-nowrap transition-all ${
                activeTab === tab.id
                  ? 'bg-accent text-base shadow-glow'
                  : 'glass-card text-text-muted hover:bg-surface'
              }`}
            >
              {tab.icon} {tab.label}
            </button>
          ))}
        </motion.div>

        {/* Content */}
        <motion.div 
          className="glass-card p-6 md:p-8 space-y-6"
          initial="initial"
          animate="animate"
          variants={fadeInUp}
        >
          {/* Profile Tab */}
          {activeTab === 'profile' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-text flex items-center gap-2">
                üë§ –û—Å–æ–±–∏—Å—Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
              </h2>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-semibold text-text-muted mb-2">
                    –Ü–º'—è
                  </label>
                  <input
                    type="text"
                    value={settings.name}
                    onChange={(e) => setSettings({ ...settings, name: e.target.value })}
                    className="input-primary"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-text-muted mb-2">
                    Email
                  </label>
                  <input
                    type="email"
                    value={settings.email}
                    disabled
                    className="input-primary opacity-50 cursor-not-allowed"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-text-muted mb-2">
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <input
                    type="tel"
                    value={settings.phone}
                    onChange={(e) => setSettings({ ...settings, phone: e.target.value })}
                    placeholder="+380 XX XXX XX XX"
                    className="input-primary"
                  />
                </div>
              </div>

              <div className="bg-warn/10 border border-warn/30 rounded-xl p-4">
                <p className="text-warn text-sm">
                  üí° –î–µ—è–∫—ñ –∑–º—ñ–Ω–∏ –º–æ–∂—É—Ç—å –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ email
                </p>
              </div>
            </div>
          )}

          {/* Notifications Tab */}
          {activeTab === 'notifications' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-text flex items-center gap-2">
                üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è
              </h2>

              <div className="space-y-4">
                {[
                  { key: 'email', label: 'Email —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', icon: 'üìß' },
                  { key: 'push', label: 'Push —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', icon: 'üì±' },
                  { key: 'sms', label: 'SMS —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', icon: 'üí¨' },
                  { key: 'promos', label: '–ê–∫—Ü—ñ—ó —Ç–∞ –∑–Ω–∏–∂–∫–∏', icon: 'üéÅ' },
                  { key: 'events', label: '–ü–æ–¥—ñ—ó —Ç–∞ –∑–∞—Ö–æ–¥–∏', icon: 'üìÖ' },
                ].map((item) => (
                  <label
                    key={item.key}
                    className="flex items-center justify-between p-4 glass-card cursor-pointer hover:bg-surface transition-all"
                  >
                    <span className="flex items-center gap-3 text-text-muted">
                      <span className="text-2xl">{item.icon}</span>
                      {item.label}
                    </span>
                    <input
                      type="checkbox"
                      checked={settings.notifications[item.key as keyof typeof settings.notifications]}
                      onChange={(e) => setSettings({
                        ...settings,
                        notifications: {
                          ...settings.notifications,
                          [item.key]: e.target.checked
                        }
                      })}
                      className="w-6 h-6 rounded accent-accent"
                    />
                  </label>
                ))}
              </div>
            </div>
          )}

          {/* Privacy Tab */}
          {activeTab === 'privacy' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-text flex items-center gap-2">
                üîí –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å
              </h2>

              <div className="space-y-4">
                {[
                  { key: 'showProfile', label: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —ñ–Ω—à–∏–º', icon: 'üëÅÔ∏è' },
                  { key: 'showStats', label: '–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', icon: 'üìä' },
                  { key: 'allowTags', label: '–î–æ–∑–≤–æ–ª–∏—Ç–∏ –ø–æ–∑–Ω–∞—á–∞—Ç–∏ –≤ –ø–æ—Å—Ç–∞—Ö', icon: 'üè∑Ô∏è' },
                ].map((item) => (
                  <label
                    key={item.key}
                    className="flex items-center justify-between p-4 glass-card cursor-pointer hover:bg-surface transition-all"
                  >
                    <span className="flex items-center gap-3 text-text-muted">
                      <span className="text-2xl">{item.icon}</span>
                      {item.label}
                    </span>
                    <input
                      type="checkbox"
                      checked={settings.privacy[item.key as keyof typeof settings.privacy]}
                      onChange={(e) => setSettings({
                        ...settings,
                        privacy: {
                          ...settings.privacy,
                          [item.key]: e.target.checked
                        }
                      })}
                      className="w-6 h-6 rounded accent-accent"
                    />
                  </label>
                ))}
              </div>

              <div className="bg-accent/10 border border-accent/30 rounded-xl p-4">
                <p className="text-accent text-sm">
                  üîê –í–∞—à—ñ –¥–∞–Ω—ñ –∑–∞—Ö–∏—â–µ–Ω—ñ —Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º
                </p>
              </div>
            </div>
          )}

          {/* Preferences Tab */}
          {activeTab === 'preferences' && (
            <div className="space-y-6">
              <h2 className="text-xl font-bold text-text flex items-center gap-2">
                ‚öôÔ∏è –í–ø–æ–¥–æ–±–∞–Ω–Ω—è
              </h2>

              <div className="space-y-4">
                <label className="flex items-center justify-between p-4 bg-accent/10 border border-accent/30 rounded-xl cursor-pointer hover:bg-accent/20 transition-all">
                  <span className="flex items-center gap-3">
                    <span className="text-3xl">üí®</span>
                    <div>
                      <div className="text-text font-semibold">–î–∏–º–æ–≤–∞ —Ç–µ–º–∞</div>
                      <div className="text-text-muted text-sm">–ê–Ω—ñ–º–æ–≤–∞–Ω–∏–π —Ñ–æ–Ω –∑ –¥–∏–º–æ–º</div>
                    </div>
                  </span>
                  <input
                    type="checkbox"
                    checked={settings.smokeTheme}
                    onChange={(e) => setSettings({ ...settings, smokeTheme: e.target.checked })}
                    className="w-6 h-6 rounded accent-accent"
                  />
                </label>

                <div className="glass-card p-4">
                  <label className="block text-sm font-semibold text-text-muted mb-2">
                    –ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                  </label>
                  <select className="input-primary">
                    <option>üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞</option>
                    <option>üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                    <option>üá¨üáß English</option>
                  </select>
                </div>

                <div className="glass-card p-4">
                  <label className="block text-sm font-semibold text-text-muted mb-2">
                    –£–ª—é–±–ª–µ–Ω—ñ —Å–º–∞–∫–∏
                  </label>
                  <div className="flex flex-wrap gap-2 mt-3">
                    {['üçì –ü–æ–ª—É–Ω–∏—Ü—è', 'üçâ –ö–∞–≤—É–Ω', 'üçä –ê–ø–µ–ª—å—Å–∏–Ω', 'üçã –õ–∏–º–æ–Ω', 'üçá –í–∏–Ω–æ–≥—Ä–∞–¥'].map((flavor) => (
                      <button
                        key={flavor}
                        className="px-4 py-2 glass-card text-sm text-text-muted hover:bg-accent/20 hover:border-accent hover:text-accent transition-all"
                      >
                        {flavor}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Save Button */}
          <div className="pt-4 border-t border-border flex gap-4">
            <button
              onClick={handleSave}
              disabled={isSaving}
              className={`flex-1 btn-primary text-lg py-4 ${
                isSaving ? 'opacity-50 cursor-wait' : saved ? 'bg-success' : ''
              }`}
            >
              {isSaving ? '‚è≥ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : saved ? '‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ!' : 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏'}
            </button>
          </div>
        </motion.div>

        {/* Danger Zone */}
        <motion.div 
          className="mt-6 bg-danger/10 border border-danger/30 rounded-2xl p-6"
          initial="initial"
          animate="animate"
          variants={fadeInUp}
        >
          <h3 className="text-lg font-bold text-danger mb-4 flex items-center gap-2">
            ‚ö†Ô∏è –ù–µ–±–µ–∑–ø–µ—á–Ω–∞ –∑–æ–Ω–∞
          </h3>
          <div className="space-y-3">
            <button 
              onClick={() => {
                if (confirm('–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º?')) {
                  fetchSettings()
                }
              }}
              className="w-full md:w-auto px-6 py-3 bg-warn/20 border border-warn text-warn rounded-xl hover:bg-warn/30 transition-all"
            >
              üîÑ –°–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            </button>
            <button 
              onClick={() => setShowDeleteModal(true)}
              className="w-full md:w-auto px-6 py-3 bg-danger/20 border border-danger text-danger rounded-xl hover:bg-danger/30 transition-all ml-0 md:ml-3"
            >
              üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç
            </button>
          </div>
        </motion.div>
      </div>

      {/* Delete Account Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <motion.div 
            className="glass-card p-6 max-w-md w-full"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.3 }}
          >
            <h3 className="text-xl font-bold text-danger mb-4">‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—É</h3>
            <p className="text-text-muted mb-4">
              –¶—è –¥—ñ—è –ø—Ä–∏–∑–≤–µ–¥–µ –¥–æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∞—à–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É. –í—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∞–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω—ñ.
            </p>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-semibold text-text-muted mb-2">
                  –ß–æ–º—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç? (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
                </label>
                <textarea
                  value={deleteReason}
                  onChange={(e) => setDeleteReason(e.target.value)}
                  className="input-primary min-h-[80px]"
                  placeholder="–í–∞—à –≤—ñ–¥–≥—É–∫ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏..."
                />
              </div>

              <div>
                <label className="block text-sm font-semibold text-text-muted mb-2">
                  –í–≤–µ–¥—ñ—Ç—å "–í–ò–î–ê–õ–ò–¢–ò" –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                </label>
                <input
                  type="text"
                  value={deleteConfirm}
                  onChange={(e) => setDeleteConfirm(e.target.value)}
                  className="input-primary"
                  placeholder="–í–ò–î–ê–õ–ò–¢–ò"
                />
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={() => {
                  setShowDeleteModal(false)
                  setDeleteConfirm('')
                  setDeleteReason('')
                }}
                className="flex-1 btn-secondary"
                disabled={isDeleting}
              >
                –°–∫–∞—Å—É–≤–∞—Ç–∏
              </button>
              <button
                onClick={handleDeleteAccount}
                disabled={isDeleting || deleteConfirm !== '–í–ò–î–ê–õ–ò–¢–ò'}
                className="flex-1 bg-danger hover:bg-danger/80 text-white font-semibold px-6 py-3 rounded-xl transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isDeleting ? '–í–∏–¥–∞–ª–µ–Ω–Ω—è...' : '–í–∏–¥–∞–ª–∏—Ç–∏'}
              </button>
            </div>
          </motion.div>
        </div>
      )}
    </div>
  )
}
