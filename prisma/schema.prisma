generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String    @id @default(cuid())
  name                      String?
  email                     String?   @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?   // Added for email/password auth
  phone                     String?   @unique
  oauth_id                  String?   @unique
  birthdate                 DateTime?
  role                      String    @default("guest") // guest, staff, admin
  created_at                DateTime  @default(now())
  first_visit_confirmed_at  DateTime?
  last_login                DateTime?
  is_blocked                Boolean   @default(false)
  smoke_theme_enabled       Boolean   @default(false)
  risk_score                Int       @default(0)
  instagram_verified        Boolean   @default(false)
  birth_bonus_claimed       Boolean   @default(false)
  referral_code             String?   @unique
  
  // Relations
  accounts                  Account[]
  sessions                  Session[]
  wheel_spins               WheelSpin[]
  coupons                   Coupon[]
  music_orders              MusicOrder[]
  referrals_sent            Referral[] @relation("referrer")
  referrals_received        Referral[] @relation("referee")
  tips                      Tip[]      @relation("tipper")
  visits                    Visit[]
  ratings                   StaffRating[]
  instagram_stories         InstagramStory[]
  qr_validations_owned      QRValidationEvent[] @relation("qr_owner")
  qr_validations_performed  QRValidationEvent[] @relation("qr_validator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific models
model Event {
  id         Int      @id @default(autoincrement())
  title      String
  description String?
  poster_url String?
  starts_at  DateTime
  ends_at    DateTime
  is_active  Boolean  @default(false)
  created_at DateTime @default(now())
}

model WheelSpin {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String
  prize_id        Int?     // Link to WheelPrize
  prize_name      String   // Prize text for history
  state           String   @default("COMPLETED") // FSM: COMPLETED, FAILED
  spun_at         DateTime @default(now())
  next_allowed_at DateTime
  client_fp       String?
  ip              String?
  
  @@index([user_id, spun_at])
  @@index([next_allowed_at])
}

model Coupon {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  type       String
  value_pct  Int?
  kind       String?
  code       String   @unique
  expires_at DateTime
  redeemed_at DateTime?
  created_at DateTime @default(now())
}

model MusicOrder {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  title       String
  note        String?
  paid_amount Int
  status      String   @default("pending")
  order_code  String   @unique
  created_at  DateTime @default(now())
}

model Referral {
  id                    Int      @id @default(autoincrement())
  referrer              User     @relation("referrer", fields: [referrer_id], references: [id])
  referrer_id           String
  referee               User?    @relation("referee", fields: [referee_id], references: [id])
  referee_id            String?
  status                String   @default("pending")
  created_at            DateTime @default(now())
  confirmed_at          DateTime?
  confirmed_by_staff_id Int?
  checkins              ReferralCheckin[]
}

model ReferralCheckin {
  id            Int      @id @default(autoincrement())
  referral      Referral @relation(fields: [referral_id], references: [id])
  referral_id   Int
  code_hash     String
  expires_at    DateTime
  attempts      Int      @default(5)
  consumed_at   DateTime?
  bill_amount   Int?
  bill_no       String?
  created_at    DateTime @default(now())
}

model Tip {
  id         Int      @id @default(autoincrement())
  staff      Staff    @relation(fields: [staff_id], references: [id])
  staff_id   Int
  user       User?    @relation("tipper", fields: [user_id], references: [id])
  user_id    String?
  amount     Int
  message    String?
  created_at DateTime @default(now())
}

model Staff {
  id                Int           @id @default(autoincrement())
  name              String
  instagram         String?
  photo_url         String?
  card_number       String?       // для прямых переводов
  is_active         Boolean       @default(true)
  average_service   Float?        @default(0)
  average_personality Float?      @default(0)
  tips_total        Int           @default(0)
  created_at        DateTime      @default(now())
  
  // Relations
  tips              Tip[]
  ratings           StaffRating[]
}

model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  order    Int    @default(0)
}

model Visit {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  visit_code    String   @unique
  status        String   @default("pending") // pending, confirmed, expired
  bill_amount   Int?
  bill_number   String?
  staff_name    String?
  confirmed_at  DateTime?
  expires_at    DateTime
  created_at    DateTime @default(now())
}

// New enhanced models for advanced functionality
model PromoCode {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  title         String
  description   String?
  type          String   // percent, fixed, special
  value         Int      // percentage or fixed amount
  min_amount    Int?     // minimum order amount
  max_uses      Int?     // usage limit
  uses_count    Int      @default(0)
  valid_from    DateTime @default(now())
  valid_until   DateTime
  is_active     Boolean  @default(true)
  source        String   @default("admin") // admin, wheel, birthday, referral
  created_by    String?  // staff/admin id
  created_at    DateTime @default(now())
  
  // Relations
  usage_logs    PromoUsage[]
}

model PromoUsage {
  id          Int       @id @default(autoincrement())
  promo_code  PromoCode @relation(fields: [code_id], references: [id])
  code_id     Int
  user_id     String
  order_amount Int?
  discount_amount Int?
  used_at     DateTime @default(now())
}

model SystemSettings {
  id                    Int      @id @default(autoincrement())
  key                   String   @unique
  value                 String
  description           String?
  category              String   @default("general") // general, wheel, music, referrals, etc
  is_public             Boolean  @default(false)
  updated_at            DateTime @default(now())
}

model StaffRating {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String
  staff           Staff    @relation(fields: [staff_id], references: [id])
  staff_id        Int
  service_rating  Int      // 1-5 stars for service
  personality_rating Int   // 1-5 smiles for personality
  visit_date      DateTime
  created_at      DateTime @default(now())
}

model InstagramStory {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String
  story_url       String
  verification_status String @default("pending") // pending, approved, rejected
  discount_claimed Boolean @default(false)
  verified_by     String?  // staff id
  verified_at     DateTime?
  created_at      DateTime @default(now())
}

model MenuItem {
  id            Int      @id @default(autoincrement())
  category      String   // hookah, kitchen, cocktails, tea
  name          String
  description   String?
  price         Int
  image_url     String?
  is_available  Boolean  @default(true)
  likes_count   Int      @default(0)
  order_count   Int      @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model AdminLog {
  id          Int      @id @default(autoincrement())
  admin_id    String
  admin_name  String
  action      String
  target_type String?  // user, promo, event, etc
  target_id   String?
  details     String?
  ip_address  String?
  created_at  DateTime @default(now())
}

model Notification {
  id          Int      @id @default(autoincrement())
  user_id     String?  // null for admin notifications
  type        String   // user, staff, admin
  title       String
  message     String
  data        String?  // JSON data
  is_read     Boolean  @default(false)
  expires_at  DateTime?
  created_at  DateTime @default(now())
}

model WheelPrize {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  type           String   // discount, free_item, points, special
  value          Int?     // percentage or points
  probability    Int      // 1-100 (weight for random selection)
  color          String   @default("#10B981")
  icon           String   @default("🎁")
  is_active      Boolean  @default(true)
  max_per_period Int?     // Optional: max this prize per period
  current_count  Int      @default(0) // Counter for period
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())
}

// QR Code Validation Events (for anti-replay and audit log)
model QRValidationEvent {
  id             String   @id @default(cuid())
  qr_type        String   // visit, promo, referral, staff_check
  qr_nonce       String   @unique // Prevents replay attacks
  qr_subject     String   // Description of QR purpose
  qr_issued_at   DateTime // When QR was generated
  qr_expires_at  DateTime // When QR expires
  user_id        String   // User who owns the QR
  validator_id   String   // Staff/Admin who validated
  validated_at   DateTime @default(now())
  success        Boolean  // Whether validation succeeded
  error_message  String?  // Error if validation failed
  
  user      User @relation("qr_owner", fields: [user_id], references: [id], onDelete: Cascade)
  validator User @relation("qr_validator", fields: [validator_id], references: [id], onDelete: Cascade)
  
  @@index([qr_nonce])
  @@index([user_id])
  @@index([validator_id])
  @@index([validated_at])
}

// Audit Log for all important actions
model AuditLog {
  id          String   @id @default(cuid())
  user_id     String?  // Who performed the action
  action      String   // wheel_spin, promo_create, visit_confirm, etc
  entity_type String?  // User, WheelSpin, PromoCode, etc
  entity_id   String?  // ID of affected entity
  details     String?  // JSON with additional data
  ip_address  String?
  user_agent  String?
  created_at  DateTime @default(now())
  
  @@index([user_id])
  @@index([action])
  @@index([created_at])
}

