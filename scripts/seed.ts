import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding database...')

  // Create admin user
  const adminPassword = await bcrypt.hash('admin123', 10)
  try {
    const admin = await prisma.user.upsert({
      where: { email: 'admin@panda.com' },
      update: {},
      create: {
        email: 'admin@panda.com',
        name: 'Admin User',
        password: adminPassword,
        role: 'admin',
        phone: '+380501234567',
        emailVerified: new Date(),
      },
    })
    console.log('‚úÖ Created admin user:', admin.email)
  } catch (e) {
    console.log('‚ö†Ô∏è Admin user already exists')
  }

  // Create demo user
  const demoPassword = await bcrypt.hash('demo123', 10)
  try {
    const demoUser = await prisma.user.upsert({
      where: { email: 'demo@panda.com' },
      update: {},
      create: {
        email: 'demo@panda.com',
        name: 'Demo User',
        password: demoPassword,
        role: 'guest',
        phone: '+380509876543',
        emailVerified: new Date(),
      },
    })
    console.log('‚úÖ Created demo user:', demoUser.email)
  } catch (e) {
    console.log('‚ö†Ô∏è Demo user already exists')
  }

  // Create staff user
  const staffPassword = await bcrypt.hash('staff123', 10)
  try {
    const staffUser = await prisma.user.upsert({
      where: { email: 'staff@panda.com' },
      update: {},
      create: {
        email: 'staff@panda.com',
        name: 'Staff Member',
        password: staffPassword,
        role: 'staff',
        phone: '+380501111111',
        emailVerified: new Date(),
      },
    })
    console.log('‚úÖ Created staff user:', staffUser.email)
  } catch (e) {
    console.log('‚ö†Ô∏è Staff user already exists')
  }

  // Create events
  try {
    const eventCount = await prisma.event.count()
    if (eventCount === 0) {
      await prisma.event.create({
        data: {
          title: 'Halloween Party üéÉ',
          description: '–ì—Ä–∞–Ω–¥—ñ–æ–∑–Ω–∞ –≤–µ—á—ñ—Ä–∫–∞ –Ω–∞ –•–µ–ª–ª–æ—É—ó–Ω –∑ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏ —Ç–∞ –ø—Ä–∏–∑–∞–º–∏!',
          poster_url: 'https://images.unsplash.com/photo-1509557965875-b88c97052f0e',
          starts_at: new Date('2024-10-31T20:00:00'),
          ends_at: new Date('2024-11-01T02:00:00'),
          is_active: true,
        },
      })

      await prisma.event.create({
        data: {
          title: 'Live Music Night üéµ',
          description: '–ñ–∏–≤–∏–π –≤–∏—Å—Ç—É–ø –≤—ñ–¥–æ–º–æ–≥–æ –≥—É—Ä—Ç—É',
          poster_url: 'https://images.unsplash.com/photo-1514525253161-7a46d19cd819',
          starts_at: new Date('2024-11-15T21:00:00'),
          ends_at: new Date('2024-11-16T01:00:00'),
          is_active: true,
        },
      })
      console.log('‚úÖ Created events')
    } else {
      console.log('‚ö†Ô∏è Events already exist')
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Error creating events:', e)
  }

  // Create FAQ entries
  try {
    const faqCount = await prisma.faq.count()
    if (faqCount === 0) {
      await prisma.faq.create({
        data: {
          question: '–Ø–∫ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫?',
          answer: '–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —Å—Ç–æ–ª–∏–∫ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç –∞–±–æ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞–≤—à–∏ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É +380 50 123 45 67',
          order: 1,
        },
      })

      await prisma.faq.create({
        data: {
          question: '–Ø–∫—ñ –≤–∏–¥–∏ –∫–∞–ª—å—è–Ω—ñ–≤ —É –≤–∞—Å —î?',
          answer: '–£ –Ω–∞—Å —î –∫–ª–∞—Å–∏—á–Ω—ñ, —Ñ—Ä—É–∫—Ç–æ–≤—ñ —Ç–∞ –ø—Ä–µ–º—ñ—É–º –∫–∞–ª—å—è–Ω–∏ –∑ –±—ñ–ª—å—à –Ω—ñ–∂ 50 —Å–º–∞–∫–∞–º–∏ —Ç—é—Ç—é–Ω—É.',
          order: 2,
        },
      })

      await prisma.faq.create({
        data: {
          question: '–ß–∏ –º–æ–∂–Ω–∞ –ø—Ä–∏–Ω–µ—Å—Ç–∏ —Å–≤—ñ–π –∞–ª–∫–æ–≥–æ–ª—å?',
          answer: '–ù–∞ –∂–∞–ª—å, —Ü–µ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ–º. –ê–ª–µ —É –Ω–∞—Å —î —à–∏—Ä–æ–∫–∏–π –≤–∏–±—ñ—Ä –Ω–∞–ø–æ—ó–≤ –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —Ü—ñ–Ω–∞–º–∏.',
          order: 3,
        },
      })
      console.log('‚úÖ Created FAQ entries')
    } else {
      console.log('‚ö†Ô∏è FAQ entries already exist')
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Error creating FAQ:', e)
  }

  // Create staff members
  try {
    const staffCount = await prisma.staff.count()
    if (staffCount === 0) {
      await prisma.staff.createMany({
        data: [
          {
            name: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä',
            instagram: '@alex_hookah',
            card_number: '5375414112347893',
            is_active: true,
          },
          {
            name: '–ú–∞—Ä—ñ—è',
            instagram: '@maria_lounge',
            card_number: '5168742312345678',
            is_active: true,
          },
          {
            name: '–î–º–∏—Ç—Ä–æ',
            instagram: '@dima_master',
            card_number: '4149439112345678',
            is_active: true,
          },
        ],
      })
      console.log('‚úÖ Created staff members')
    } else {
      console.log('‚ö†Ô∏è Staff members already exist')
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Error creating staff:', e)
  }

  // Create wheel prizes
  try {
    const prizeCount = await prisma.wheelPrize.count()
    if (prizeCount === 0) {
      await prisma.wheelPrize.createMany({
        data: [
          {
            name: 'üéÅ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∫–∞–ª—å—è–Ω',
            description: '–û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–∞–ª—å—è–Ω –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫',
            type: 'free_item',
            probability: 5,
            color: '#10B981',
            is_active: true,
          },
          {
            name: 'üí∞ –ó–Ω–∏–∂–∫–∞ 20%',
            description: '–ó–Ω–∏–∂–∫–∞ 20% –Ω–∞ –≤–µ—Å—å —Ä–∞—Ö—É–Ω–æ–∫',
            type: 'discount',
            value: 20,
            probability: 15,
            color: '#F59E0B',
            is_active: true,
          },
          {
            name: 'üíé –ë–æ–Ω—É—Å 50 –±–∞–ª—ñ–≤',
            description: '–û—Ç—Ä–∏–º–∞–π—Ç–µ 50 –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤',
            type: 'points',
            value: 50,
            probability: 25,
            color: '#3B82F6',
            is_active: true,
          },
          {
            name: 'üçπ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –Ω–∞–ø—ñ–π',
            description: '–ë—É–¥—å-—è–∫–∏–π –Ω–∞–ø—ñ–π –≤ –ø–æ–¥–∞—Ä—É–Ω–æ–∫',
            type: 'free_item',
            probability: 15,
            color: '#8B5CF6',
            is_active: true,
          },
          {
            name: 'üí∞ –ó–Ω–∏–∂–∫–∞ 10%',
            description: '–ó–Ω–∏–∂–∫–∞ 10% –Ω–∞ –≤–µ—Å—å —Ä–∞—Ö—É–Ω–æ–∫',
            type: 'discount',
            value: 10,
            probability: 30,
            color: '#EC4899',
            is_active: true,
          },
          {
            name: 'üéüÔ∏è –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑',
            description: '–©–µ –æ–¥–Ω–∞ —Å–ø—Ä–æ–±–∞ —Å—å–æ–≥–æ–¥–Ω—ñ',
            type: 'points',
            value: 0,
            probability: 10,
            color: '#6B7280',
            is_active: true,
          },
        ],
      })
      console.log('‚úÖ Created wheel prizes')
    } else {
      console.log('‚ö†Ô∏è Wheel prizes already exist')
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Error creating wheel prizes:', e)
  }

  // Create menu items
  try {
    const menuCount = await prisma.menuItem.count()
    if (menuCount === 0) {
      await prisma.menuItem.createMany({
        data: [
          {
            category: 'hookah',
            name: '–ö–ª–∞—Å–∏—á–Ω–∏–π –∫–∞–ª—å—è–Ω',
            description: '–¢—Ä–∞–¥–∏—Ü—ñ–π–Ω–∏–π –∫–∞–ª—å—è–Ω –∑ –≤–∞—à–∏–º —É–ª—é–±–ª–µ–Ω–∏–º —Å–º–∞–∫–æ–º',
            price: 250,
            is_available: true,
          },
          {
            category: 'hookah',
            name: '–ü—Ä–µ–º—ñ—É–º –∫–∞–ª—å—è–Ω',
            description: '–ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —Å–º–∞–∫–∏ –ø—Ä–µ–º—ñ—É–º –∫–ª–∞—Å—É',
            price: 350,
            is_available: true,
          },
          {
            category: 'hookah',
            name: '–§—Ä—É–∫—Ç–æ–≤–∏–π –∫–∞–ª—å—è–Ω',
            description: '–ö–∞–ª—å—è–Ω –Ω–∞ —Ñ—Ä—É–∫—Ç–æ–≤—ñ–π —á–∞—à—ñ',
            price: 400,
            is_available: true,
          },
          {
            category: 'kitchen',
            name: '–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä',
            description: '–ö–ª–∞—Å–∏—á–Ω–∏–π —Å–∞–ª–∞—Ç –∑ –∫—É—Ä–∫–æ—é —Ç–∞ –ø–∞—Ä–º–µ–∑–∞–Ω–æ–º',
            price: 180,
            is_available: true,
          },
          {
            category: 'kitchen',
            name: '–ü—ñ—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
            description: '–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞ –ø—ñ—Ü–∞ –∑ —Ç–æ–º–∞—Ç–∞–º–∏ —Ç–∞ –º–æ—Ü–∞—Ä–µ–ª–æ—é',
            price: 220,
            is_available: true,
          },
          {
            category: 'cocktails',
            name: '–ú–æ—Ö—ñ—Ç–æ',
            description: '–û—Å–≤—ñ–∂–∞—é—á–∏–π –∫–æ–∫—Ç–µ–π–ª—å –∑ –º\'—è—Ç–æ—é —Ç–∞ –ª–∞–π–º–æ–º',
            price: 120,
            is_available: true,
          },
          {
            category: 'cocktails',
            name: '–ü—ñ–Ω–∞ –ö–æ–ª–∞–¥–∞',
            description: '–¢—Ä–æ–ø—ñ—á–Ω–∏–π –∫–æ–∫—Ç–µ–π–ª—å –∑ –∞–Ω–∞–Ω–∞—Å–æ–º —Ç–∞ –∫–æ–∫–æ—Å–æ–º',
            price: 140,
            is_available: true,
          },
          {
            category: 'tea',
            name: '–ó–µ–ª–µ–Ω–∏–π —á–∞–π',
            description: '–ê—Ä–æ–º–∞—Ç–Ω–∏–π –∑–µ–ª–µ–Ω–∏–π —á–∞–π',
            price: 60,
            is_available: true,
          },
          {
            category: 'tea',
            name: '–ß–∞–π –∑ –º\'—è—Ç–∏',
            description: '–û—Å–≤—ñ–∂–∞—é—á–∏–π –º\'—è—Ç–Ω–∏–π —á–∞–π',
            price: 70,
            is_available: true,
          },
        ],
      })
      console.log('‚úÖ Created menu items')
    } else {
      console.log('‚ö†Ô∏è Menu items already exist')
    }
  } catch (e) {
    console.log('‚ö†Ô∏è Error creating menu items:', e)
  }

  console.log('üéâ Seeding completed successfully!')
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding error:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
